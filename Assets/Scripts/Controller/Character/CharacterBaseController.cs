using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// ï¿½Ã·ï¿½ï¿½Ì¾ï¿½ï¿? Ä³ï¿½ï¿½ï¿½ï¿½ ï¿½ß°ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿? Ä³ï¿½ï¿½ï¿½ï¿½ ï¿½âº» Å¬ï¿½ï¿½ï¿½ï¿½
public class CharacterBaseController : MonoBehaviour
{
    protected Rigidbody2D rb; // Ä³ï¿½ï¿½ï¿½Í´ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ç¾ï¿½ ï¿½Ö¾îµµ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½àµ¿ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Ê¿ï¿½
    protected Animator anim;
    protected GameUI gameUI;

    [Header("Character State")]
    [Tooltip("Ä³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Æ® ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í½ï¿½")]
    public float maxHp = 3f;    // memo: 3ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Æ®ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?, ï¿½Ý¸ï¿½ ï¿½ï¿½ï¿? ï¿½ï¿½È²ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï¿ï¿½ floatï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
    protected float currentHp = 0f;
    protected float moveSpeed = 5f;
    protected float currentSpeed = 0f;
    public float jumpPower = 3f;
    public float currentJumpPower = 0f;
    public int maxJumpCount = 1;    // Ä³ï¿½ï¿½ï¿½Í°ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ È½ï¿½ï¿½
    public int jumpCount = 0;
    public bool isJumping = false;
    public bool isJumpHold = false;  // ï¿½ï¿½ï¿½ï¿½Å° ï¿½ï¿½ï¿½ï¿½ È®ï¿½ï¿½
    protected float slidePower = 2f;
    protected int score = 0;
    protected int bestScore = 0;
    public bool isSliding = false;
    public bool isGround = false;
    public float CurrentHp { get { return currentHp; } set { currentHp = value; } }
    public float CurrentSpeed { get { return moveSpeed; } set { moveSpeed = value; } }
    public float CurrentJumpPower { get { return jumpPower; } set { jumpPower = value; } }
    public int Score { get { return score; } set { score = value; } }
    public int BestScore { get { return bestScore; } set { bestScore = value; } }
    protected float damage = 1f;

    protected float knockBackPower = 3f;
    public float KnockBackPower { get { return knockBackPower; } }


    [Header("Character Interaction")]

    protected Vector2 knockBack = Vector2.zero;   // ï¿½ï¿½Ö¹ï¿½ï¿½ï¿? ï¿½Îµï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ Ä³ï¿½ï¿½ï¿½Í°ï¿½ ï¿½Ð·ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½
    protected float knockBackDuration = 0f;

    protected float invincibleDuration = 2f; // ï¿½ï¿½ï¿½ï¿½ ï¿½Ã°ï¿½
    public bool isInvincible = false;  // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ Ã¼Å©

    private Coroutine invincibleCoroutine = null;

    private Vector3 returnPosition = Vector3.zero;   // Ä³ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Ä¡
    private float returnDistance = 5f; // Ä³ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Óµï¿½

    protected virtual void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponentInChildren<Animator>();

    }

    protected virtual void Start()
    {

    }

    protected virtual void Update()
    {

    }

    protected virtual void FixedUpdate()
    {
        if (knockBackDuration > 0f)
        {
            knockBackDuration -= Time.fixedDeltaTime;
        }
        else if (knockBack != Vector2.zero)   // ï¿½Ë¹ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?, ï¿½Ë¹ï¿½ ï¿½ï¿½ï¿½Â¸ï¿½ ï¿½Ê±ï¿½È­
        {
            RecoverKnockBack();
        }
    }

    public virtual void SetCharacterState()
    {

    }

    // memo: ï¿½ï¿½ï¿½ï¿½ï¿½Ìµï¿½ ï¿½ï¿½, ï¿½Óµï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Ó½ï¿½Å°ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ê¿ï¿½ï¿½Ò±ï¿½?
    public virtual void Jump()

    {

    }

    public virtual void Slide()
    {

    }

    public virtual void EndSlide()
    {

    }

    public virtual void Damage(float damage)
    {
        currentHp -= damage;

        if (currentHp <= 0f)    // Ã¼ï¿½ï¿½ï¿½ï¿½ 0 ï¿½ï¿½ï¿½Ï·ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ô¾ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?, ï¿½ï¿½ï¿? Ã³ï¿½ï¿½
        {
            gameUI.CheckGameOver();
            Dead();
        }
    }

    public virtual void Heal()
    {
        if (currentHp < maxHp)
        {
            currentHp++;

            if (currentHp > maxHp)
            {
                currentHp = maxHp;
            }
        }
    }

    public virtual void Dead()
    {
        rb.velocity = Vector3.zero;

        foreach (Behaviour component in transform.GetComponentsInChildren<Behaviour>())
        {
            component.enabled = false;
        }

        // to do: ï¿½ï¿½ï¿? ï¿½Ö´Ï¸ï¿½ï¿½Ì¼ï¿½ ï¿½ß°ï¿½

        Destroy(gameObject, 2f);
    }

    public virtual void ApplyKnockBack(Transform other, float power)
    {
        returnPosition.x = transform.position.x;   // Ä³ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Ä¡ï¿½ï¿½ ï¿½Ë¹ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Ä¡ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½

        knockBackDuration = power / 3;  // ï¿½Ð¾î³»ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Ò¼ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Æ°ï¿½ï¿½ï¿½
        knockBack = (other.position - transform.position).normalized * power;

        rb.velocity -= knockBack;
    }

    // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½, Ä³ï¿½ï¿½ï¿½Í¸ï¿½ È­ï¿½ï¿½ ï¿½ß¾ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Í½ï¿½Å´
    protected virtual void RecoverKnockBack()
    {
        float currentXPos = transform.position.x;   // ï¿½Ë¹ï¿½ ï¿½ï¿½ï¿½ï¿½ Ä³ï¿½ï¿½ï¿½ï¿½ xï¿½ï¿½Ç¥ï¿½ï¿½
        float targetXPos = returnPosition.x;

        if (Mathf.Abs(currentXPos - targetXPos) < 0.001f)   // ï¿½Ë¹ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½, Ä³ï¿½ï¿½ï¿½Í°ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Ä¡ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?
        {
            knockBack = Vector2.zero;
            rb.velocity = Vector2.zero;

            return;
            // returnPosition.x = currentX;   // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Ä¡ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Ä¡ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
        }

        float returnXPos = Mathf.Lerp(currentXPos, targetXPos, Time.deltaTime * returnDistance);

        transform.position = new Vector3(returnXPos, transform.position.y, transform.position.z);
    }

    public virtual void ApplyInvincible()
    {
        if (invincibleCoroutine != null)    // ï¿½Ú·ï¿½Æ¾ ï¿½ßºï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
        {
            StopCoroutine(invincibleCoroutine);
        }

        invincibleCoroutine = StartCoroutine(InvincibleCoroutine(invincibleDuration));
    }

    protected IEnumerator InvincibleCoroutine(float duration)
    {
        isInvincible = true;

        yield return new WaitForSeconds(duration);  // ï¿½ï¿½ï¿½ï¿½ ï¿½Ã°ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Ô¼ï¿½ È£ï¿½ï¿½ ï¿½ï¿½ï¿?

        EndInvincible();

        invincibleCoroutine = null;
    }

    protected virtual void EndInvincible()
    {
        isInvincible = false;
    }
}