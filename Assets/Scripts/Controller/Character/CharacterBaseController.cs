using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// 플레이어블 캐릭터 추가를 대비한 캐릭터 기본 클래스
public class CharacterBaseController : MonoBehaviour
{
    protected Rigidbody2D rb; // 캐릭터는 고정되어 있어도 점프 등의 행동을 위해 필요
    protected Animator anim;

    [Header("Character State")]
    [Tooltip("캐릭터의 디폴트 스테이터스")]
    protected float maxHp = 3f;    // memo: 3개의 하트를 가지고 있을 경우, 반만 깎는 상황을 상정하여 float로 지정
    protected float currentHp = 0f;
    protected float moveSpeed = 5f;
    protected float currentSpeed = 0f;
    protected float jumpPower = 3f;
    protected float currentJumpPower = 0f;
    protected int maxJumpCount = 1;    // 캐릭터가 공중 점프 횟수
    protected int jumpCount = 0;
    protected bool isJumping = false;
    protected float slidePower = 2f;
    protected bool isSliding = false;
    protected bool isGround = false;

    [Header("Character Interaction")]
    private Vector2 knockBack = Vector2.zero;   // 장애물에 부딪힌 이후 캐릭터가 밀려나는 힘
    private float knockBackDuration = 0f;

    private float invincibleDuration = 0f; // 무적 시간

    protected virtual void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
    }

    protected virtual void Start()
    {

    }

    protected virtual void Update()
    {

    }

    protected virtual void FixedUpdate()
    {

    }

    protected virtual void SetCharacterState()
    {

    }

    // memo: 슬라이딩 시, 속도를 가속시키는 로직이 필요할까?
    protected virtual void Jump()
    {

    }

    protected virtual void Slide()
    {

    }

    protected virtual void EndSlide()
    {

    }

    protected virtual void ApplyKnockBack(Transform other, float power, float duration)
    {
        knockBackDuration = duration;
        knockBack = (other.position - transform.position).normalized * power;
    }

    protected virtual void ApplyInvincible()
    {

    }
}
